{
  "info": {
    "name": "Clozet-Auth-Mailtrap-Tests",
    "description": "Tests for Clozet authentication system including email verification with Mailtrap",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Register User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "register"]
        },
        "description": "Register a new user and trigger a verification email to be sent to Mailtrap"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Successful user registration message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include(\"User registered successfully\");",
              "});",
              "",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "console.log(\"üîÑ CHECK MAILTRAP: A verification email has been sent to Mailtrap. Check the inbox for the verification token.\");",
              "console.log(\"üìù NEXT STEP: Extract the verification token from the email and use it in the 'Verify User Email' request.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "2. Verify User Email",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/auth/verify?token={{verificationToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "verify"],
          "query": [
            {
              "key": "token",
              "value": "{{verificationToken}}"
            }
          ]
        },
        "description": "Verify a user's email using the token from the verification email sent to Mailtrap. You need to manually extract the token from the email link."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Email verification successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include(\"Email verified successfully\");",
              "});",
              "",
              "// Check if cookies were set",
              "pm.test(\"Authentication cookies are set\", function () {",
              "    pm.expect(pm.cookies.has(\"jwt\")).to.be.true;",
              "    pm.expect(pm.cookies.has(\"refreshToken\")).to.be.true;",
              "});",
              "",
              "console.log(\"‚úÖ Email verified and user is now logged in automatically.\");",
              "console.log(\"üìù NEXT STEP: You can now test login or forgot password functionality.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "3. Login User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Log in with the registered user credentials."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Authentication cookies are set\", function () {",
              "    pm.expect(pm.cookies.has(\"jwt\")).to.be.true;",
              "    pm.expect(pm.cookies.has(\"refreshToken\")).to.be.true;",
              "});",
              "",
              "console.log(\"‚úÖ User successfully logged in.\");",
              "console.log(\"üìù NEXT STEP: You can test the forgot password functionality.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "4. Logout User",
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "logout"]
        },
        "description": "Log out the current user and invalidate the authentication tokens."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Logout message is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include(\"logged out successfully\");",
              "});",
              "",
              "// Check if cookies were cleared",
              "pm.test(\"Authentication cookies are cleared\", function () {",
              "    if (pm.cookies.has(\"jwt\")) {",
              "        pm.expect(pm.cookies.get(\"jwt\")).to.be.oneOf([\"\", null, undefined]);",
              "    }",
              "    if (pm.cookies.has(\"refreshToken\")) {",
              "        pm.expect(pm.cookies.get(\"refreshToken\")).to.be.oneOf([\"\", null, undefined]);",
              "    }",
              "});",
              "",
              "console.log(\"‚úÖ User successfully logged out.\");",
              "console.log(\"üìù NEXT STEP: You can test the forgot password functionality.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "5. Request Password Reset",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"test@example.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/forgot-password",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "forgot-password"]
        },
        "description": "Request a password reset email to be sent to the registered email address (Mailtrap)."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Password reset request successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include(\"password reset link has been sent\");",
              "});",
              "",
              "console.log(\"üîÑ CHECK MAILTRAP: A password reset email has been sent to Mailtrap. Check the inbox for the reset token.\");",
              "console.log(\"üìù NEXT STEP: Extract the reset token from the email and use it in the 'Validate Reset Token' request.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "6. Validate Reset Token",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/auth/reset-password/validate?token={{resetToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "reset-password", "validate"],
          "query": [
            {
              "key": "token",
              "value": "{{resetToken}}"
            }
          ]
        },
        "description": "Validate the password reset token extracted from the password reset email (Mailtrap)."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Token validation successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include(\"Valid token\");",
              "});",
              "",
              "console.log(\"‚úÖ Password reset token is valid.\");",
              "console.log(\"üìù NEXT STEP: Continue to the 'Reset Password' request to set a new password.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "7. Reset Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"password\": \"newpassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/reset-password",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "reset-password"]
        },
        "description": "Reset the user's password using the token from the password reset email."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Password reset successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include(\"Password has been reset successfully\");",
              "});",
              "",
              "// Store the new password for login test",
              "pm.collectionVariables.set(\"newPassword\", \"newpassword123\");",
              "",
              "console.log(\"‚úÖ Password has been reset successfully.\");",
              "console.log(\"üìù NEXT STEP: Test login with the new password.\");"
            ]
          }
        }
      ]
    },
    {
      "name": "8. Login with New Password",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"{{newPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        },
        "description": "Log in with the new password after reset."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Authentication cookies are set\", function () {",
              "    pm.expect(pm.cookies.has(\"jwt\")).to.be.true;",
              "    pm.expect(pm.cookies.has(\"refreshToken\")).to.be.true;",
              "});",
              "",
              "console.log(\"‚úÖ User successfully logged in with the new password.\");",
              "console.log(\"üéâ Authentication flow with Mailtrap email integration testing is complete!\");"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string",
      "description": "Token from verification email (extract from Mailtrap)"
    },
    {
      "key": "resetToken",
      "value": "",
      "type": "string",
      "description": "Token from password reset email (extract from Mailtrap)"
    },
    {
      "key": "newPassword",
      "value": "newpassword123",
      "type": "string"
    }
  ]
} 