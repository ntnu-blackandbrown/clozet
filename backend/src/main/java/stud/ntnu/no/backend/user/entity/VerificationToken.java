package stud.ntnu.no.backend.user.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import java.time.LocalDateTime;

/**
 * Entity representing a verification token for user email verification.
 * <p>
 * This entity stores tokens that are sent to users via email during registration to verify their
 * email address. Each token has an expiration date and is linked to a specific user. Once a token
 * is used for verification, it can be deleted.
 * </p>
 * <p>
 * The verification process helps ensure that email addresses are valid and belong to the user who
 * registered, reducing the risk of spam and fake accounts.
 * </p>
 */
@Entity
@Table(name = "verification_tokens")
public class VerificationToken {

  /**
   * The unique identifier for the verification token. Auto-generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The actual token string sent to the user for verification. Must be unique to prevent conflicts
   * and cannot be null.
   */
  @Column(nullable = false, unique = true)
  private String token;

  /**
   * The date and time when this token expires. Cannot be null as all tokens must have an expiry
   * date for security reasons.
   */
  @Column(nullable = false)
  private LocalDateTime expiryDate;

  /**
   * The user associated with this verification token. One-to-one relationship as each token belongs
   * to exactly one user.
   */
  @OneToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = "user_id", nullable = false)
  private User user;

  /**
   * Default constructor for JPA. Protected to prevent direct instantiation without required
   * fields.
   */
  protected VerificationToken() {
  }

  /**
   * Constructs a new VerificationToken with the specified token, expiry date, and user.
   * <p>
   * This constructor ensures that all required fields are provided when creating a new verification
   * token.
   * </p>
   *
   * @param token      the unique token string to be sent in verification emails
   * @param expiryDate the date and time when this token will expire
   * @param user       the user who needs to verify their email address
   */
  public VerificationToken(String token, LocalDateTime expiryDate, User user) {
    this.token = token;
    this.expiryDate = expiryDate;
    this.user = user;
  }

  /**
   * Returns the unique identifier of the verification token.
   *
   * @return the token ID
   */
  public Long getId() {
    return id;
  }

  /**
   * Sets the unique identifier of the verification token.
   *
   * @param id the token ID to set
   */
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Returns the token string used for verification.
   *
   * @return the token string
   */
  public String getToken() {
    return token;
  }

  /**
   * Sets the token string used for verification.
   *
   * @param token the token string to set
   */
  public void setToken(String token) {
    this.token = token;
  }

  /**
   * Returns the expiration date and time of the token.
   *
   * @return the expiry date
   */
  public LocalDateTime getExpiryDate() {
    return expiryDate;
  }

  /**
   * Sets the expiration date and time of the token.
   *
   * @param expiryDate the expiry date to set
   */
  public void setExpiryDate(LocalDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }

  /**
   * Returns the user associated with this verification token.
   *
   * @return the associated user
   */
  public User getUser() {
    return user;
  }

  /**
   * Sets the user associated with this verification token.
   *
   * @param user the user to associate with this token
   */
  public void setUser(User user) {
    this.user = user;
  }

  /**
   * Checks if the token has expired by comparing its expiry date with the current time.
   * <p>
   * This method is useful for validation before processing a verification request.
   * </p>
   *
   * @return true if the current time is after the expiry date, false otherwise
   */
  public boolean isExpired() {
    return LocalDateTime.now().isAfter(expiryDate);
  }
} 