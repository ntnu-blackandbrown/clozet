{
	"info": {
		"_postman_id": "6c7fee5d-3a3d-4b2c-aef5-f6f384e7a2f1",
		"name": "Clozet Refresh Token Test",
		"description": "Collection to test JWT refresh token implementation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Store cookies for subsequent requests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Extract and verify JWT cookie",
							"pm.test(\"JWT cookie is set\", function () {",
							"    const cookieHeader = pm.response.headers.get(\"Set-Cookie\");",
							"    pm.expect(cookieHeader).to.include(\"jwt=\");",
							"    console.log(\"Cookies received: \" + cookieHeader);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usernameOrEmail\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "Login to obtain JWT token and refresh token cookies"
			},
			"response": []
		},
		{
			"name": "2. Access Protected Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"me"
					]
				},
				"description": "Access a protected resource with the JWT token"
			},
			"response": []
		},
		{
			"name": "3. Wait for Access Token to Expire",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This is a dummy request that will wait for the access token to expire",
							"// You can adjust the delay time based on your token expiration setting",
							"",
							"setTimeout(function() {",
							"    console.log(\"Waited for access token to expire\");",
							"    pm.test(\"Waited for token expiration\", function() {",
							"        pm.expect(true).to.be.true;",
							"    });",
							"}, 31000); // Wait for 31 seconds (token expires after 30 seconds)",
							"",
							"// Access token is now set to expire after 30 seconds in application.yml",
							"// We wait slightly longer to ensure the token has expired"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/1",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"1"
					]
				},
				"description": "This is a dummy request with a delay to simulate waiting for the access token to expire"
			},
			"response": []
		},
		{
			"name": "4. Access Protected Resource After Expiry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This should fail with 401 if the token has expired",
							"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([401, 200]);",
							"    ",
							"    if (pm.response.code === 401) {",
							"        console.log(\"Access token has expired as expected\");",
							"    } else {",
							"        console.log(\"Access token still valid - might need to wait longer\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"me"
					]
				},
				"description": "Try to access a protected resource after the JWT token has expired"
			},
			"response": []
		},
		{
			"name": "5. Refresh Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New JWT cookie is set\", function () {",
							"    const cookieHeader = pm.response.headers.get(\"Set-Cookie\");",
							"    pm.expect(cookieHeader).to.include(\"jwt=\");",
							"    console.log(\"New cookies received: \" + cookieHeader);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/auth/refresh-token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"refresh-token"
					]
				},
				"description": "Use the refresh token to get a new access token"
			},
			"response": []
		},
		{
			"name": "6. Access Protected Resource with New Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    console.log(\"Successfully accessed protected resource with new token\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"me"
					]
				},
				"description": "Access a protected resource with the new JWT token"
			},
			"response": []
		},
		{
			"name": "7. Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cookies are cleared\", function () {",
							"    const cookieHeader = pm.response.headers.get(\"Set-Cookie\");",
							"    pm.expect(cookieHeader).to.include(\"Max-Age=0\");",
							"    console.log(\"Logout cookies: \" + cookieHeader);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/auth/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				},
				"description": "Logout to invalidate tokens"
			},
			"response": []
		},
		{
			"name": "8. Verify Logged Out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 after logout\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"    console.log(\"Successfully verified logout - access denied as expected\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"me"
					]
				},
				"description": "Verify that we can't access protected resources after logout"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Base URL of your backend server"
		},
		{
			"key": "username",
			"value": "testuser",
			"type": "string",
			"description": "Test username"
		},
		{
			"key": "password",
			"value": "password123",
			"type": "string",
			"description": "Test password"
		}
	]
} 